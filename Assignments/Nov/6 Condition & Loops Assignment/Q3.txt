Q3. What are loops, and what do we need them? Explain different types of loops with their syntax and
examples.

Loops in programming are control structures that allow you to repeat a set of
instructions or a block of code multiple times. They are crucial for automating 
repetitive tasks, iterating over collections of data, and streamlining the execution 
of code. Loops help in reducing redundancy and making code more efficient.

There are several types of loops in JavaScript, each serving different purposes. 
Here are the main types of loops along with their syntax and examples:

1. for Loop:
The for loop is used when the number of iterations is known or can be determined in advance.

syntax :
for (initialization; condition; update) {
    // ...code
}

code:
for (let i = 0; i < 5; i++) {
  console.log(i); 
}

while Loop:
The while loop is used when the number of iterations is not known in advance,
 and the loop continues as long as a specified condition is true.
syntax :
 while (condition) {

}

example: 
let i = 0;

while (i < 5) {
  console.log(i); 
  i++;
}

3. do-while Loop:
The do-while loop is similar to the while loop, but it guarantees that the code 
inside the loop will execute at least once before checking the condition.

do {
    // ... code
} while (condition);

example:

let i = 0;
do {
  console.log(i);
  i++;
} while (i < 5);

4. for...in Loop:
The for...in loop is used to iterate over the properties of an object.

Syntax:

for (variable in object) {
  // Code to be executed in each iteration
}

code:
const person = { name: "John", age: 25, gender: "Male" };

for (let key in person) {
  console.log(`${key}: ${person[key]}`);
}

5. for...of Loop:
The for...of loop is used to iterate over iterable objects (arrays, strings, etc.).

syntax:
for (variable of iterable) {
  // ... code
}

const colors = ['red', 'green', 'blue'];

for (let color of colors) {
  console.log(color);
}



